datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  amcatSessions AmcatSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// Users can start an AmCAT session using an oauth2 + PKCE flow.
// Once the flow is completed, they receive a short lived access_token
// and long lived rotating refresh token. The access token is a JWT,
// and can be validated by the AmCAT resource.
// 
// expired sessions are automatically removed when a new session is created
// or a refresh token is used.
model AmcatSession {
  id              String    @id @default(cuid())
  userId          String
  clientId        String                 // id of client, generally the url host
  resource        String                 // The specific AmCAT service + server 
  expires         DateTime               // session expiration date
  secret          String    @db.Text     // authorization code = id + '.' + secret. 
  secretExpires   DateTime                 // secret code expiration date
  secretUsed      Boolean   @default(false) // secret code can only be used once. we stop the session if used twice to catch malicious reuse 
  codeChallenge   String    @db.Text     // PKCE code challenge for authorization code grant
  refreshTokens   AmcatRefreshToken[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// refresh tokens are tied to sessions and rotated.
// as the refresh token we use: id + '.' + secret
// when a refresh token is used, a new row is created
// and the old one is invalidated but kept to catch malicious reuse.
// When a invalidated token is used we close the entire session.
// (note that refresh tokens are deleted when the session expires or is invalided)
model AmcatRefreshToken {
  id               String    @id @default(cuid())
  amcatsessionId   String
  secret           String    @db.Text
  invalid          Boolean   @default(false)   
     
  amcatsession     AmcatSession     @relation(fields: [amcatsessionId], references: [id], onDelete: Cascade)
}
