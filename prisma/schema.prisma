datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amcatsession AmcatSession[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  amcatSessions AmcatSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Type {
  browser
  apiKey
}

// The Session table is for middlecat sessions. This table is for
// AmCAT sessions (including modules like AnnoTinder). Currently,
// AmCAT sessions are bound to MiddleCat sessions, meaning that if 
// a user closes the MiddleCat session, this automatically closes
// all underlying AmCAT sessions. This is nice for security, and I
// think its what users would expect. 
model AmcatSession {
  id              String    @id @default(cuid())
  sessionId       String?                // sessionId is optional, because session for bearer tokens (e.g., for R, Python) should be independent         
  userId          String
  type            Type                   // either "browser" or "apiKey". For displaying sessions to user
  label           String                 // for diplaying sessions to user
  createdOn       String                 // details about when and on what device session was created
  createdAt       DateTime  @default(now())
  clientId        String                 // id of client, generally the url host
  resource        String                 // The specific AmCAT service + server 
  scope           String                 // Most authorization will be handled by server, but read-only api keys sound nice
  expires         DateTime               // ultimate session expiration date
  refreshRotate   Boolean                // should refresh tokens be rotated?
  refreshExpires  DateTime?              // for browser sessions the refresh token can expire. For api_keys this is disabled
  secret          String?   @db.Text     // authorization code = id + '.' + secret. 
  secretExpires   DateTime?              // secret code expiration date
  codeChallenge   String?   @db.Text     // PKCE code challenge for authorization code grant
  refreshTokens   AmcatRefreshToken[]

  session         Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// refresh tokens are tied to sessions and rotated.
// as the refresh token we use: id + '.' + secret
// when a refresh token is used, a new row is created
// and the old one is invalidated but kept to catch malicious reuse.
// When a invalidated token is used we close the entire session.
// (note that refresh tokens are deleted when the session expires or is invalided)
model AmcatRefreshToken {
  id               String    @id @default(cuid())
  amcatsessionId   String
  secret           String    @db.Text 
  invalidSince     DateTime?     
     
  amcatsession     AmcatSession     @relation(fields: [amcatsessionId], references: [id], onDelete: Cascade)
}
